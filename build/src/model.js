"use strict";
const _ = require('lodash');
const cypher = require('./cypher');
class Model {
    constructor(schema) {
        this.schema = schema;
        this.data = {};
        for (let key in schema.fields) {
            Object.defineProperty(this, key, {
                get: () => {
                    return this.data[key];
                },
                set: (value) => {
                    this.set(key, value);
                    return this;
                },
                configurable: false,
                enumerable: true
            });
        }
    }
    instance(data) {
        let model = new Model(this.schema);
        if (data)
            model.setBulk(data);
        return model;
    }
    getData() {
        return this.data;
    }
    get(key) {
        if (_.has(this.schema.fields, key)) {
            return this.data[key];
        }
    }
    setBulk(object) {
        for (let key in object) {
            this.set(key, object[key]);
        }
    }
    set(key, value) {
        if (_.has(this.schema.fields, key)) {
            let passed = true;
            let keyType = this.schema.fields[key];
            if (keyType === String) {
                if (!_.isString(value))
                    passed = false;
            }
            else if (keyType === Number) {
                if (!_.isNumber(value))
                    passed = false;
            }
            else if (keyType === Boolean) {
                if (!_.isBoolean(value))
                    passed = false;
            }
            else if (keyType === Date) {
                if (!_.isDate(value))
                    passed = false;
            }
            else if (_.isArray(keyType)) {
                if (keyType[0] !== String && keyType[0] !== Number && keyType[0] !== Boolean)
                    passed = false;
            }
            else if (keyType === JSON) {
                if (!_.isObject(value))
                    passed = false;
            }
            if (!passed)
                console.warn(`Type of ${key} provided by program doesn't match the type 
                              definition in the schema. We can't set field.`);
            else
                this.data[key] = value;
        }
        else {
            console.warn(`${this.schema.label} doesn't have a field named ${key} in definition. 
                        We can't set field.`);
        }
    }
    toDatabaseStructure(object) {
        let data = {};
        for (let key in object) {
            let value = object[key];
            if (_.has(this.schema.fields, key)) {
                let keyType = this.schema.fields[key];
                if (keyType === Date) {
                    data[key] = value.getTime();
                }
                else if (keyType === JSON) {
                    data[key] = JSON.stringify(value);
                }
                else {
                    data[key] = value;
                }
            }
        }
        return data;
    }
    fromDatabaseStructure(object) {
        let data = {};
        for (let key in object) {
            let value = object[key];
            if (_.has(this.schema.fields, key)) {
                let passed = true;
                let keyType = this.schema.fields[key];
                if (keyType === String) {
                    if (!_.isString(value))
                        passed = false;
                }
                else if (keyType === Number) {
                    if (!_.isNumber(value))
                        passed = false;
                }
                else if (keyType === Boolean) {
                    if (!_.isBoolean(value))
                        passed = false;
                }
                else if (keyType === Date) {
                    value = new Date(value);
                    if (!_.isDate(value))
                        passed = false;
                }
                else if (_.isArray(keyType)) {
                    if (keyType[0] !== String && keyType[0] !== Number && keyType[0] !== Boolean)
                        passed = false;
                }
                else {
                    value = JSON.parse(value);
                }
                if (!passed)
                    console.warn(`Type of ${key} provided by DB doesn't match the type 
                                definition in the schema. We can't set property.`);
                else
                    data[key] = value;
            }
            else {
                console.warn(`${this.schema.label} doesn't have a field named ${key} in definition. 
                              We can't set property.`);
            }
        }
        return data;
    }
    save() {
        return new Promise((resolve, reject) => {
            this.schema.seraph.save(this.toDatabaseStructure(this.data), this.schema.label, (err, node) => {
                if (err)
                    reject(err);
                this.data = this.fromDatabaseStructure(node);
                return resolve(this);
            });
        });
    }
    findById(id) {
        return new Promise((resolve, reject) => {
            if (!id)
                return reject('`Warning: findById was called without the id parameter.');
            let query = cypher.queryByLabelAndId(this.schema.label, id);
            this.schema.seraph.query(query, (err, nodes) => {
                if (err)
                    return reject(err);
                if (nodes.length == 0)
                    return reject(`Warning: no node found with id=${id}`);
                if (nodes.length > 1)
                    return reject(`Warning: found more than one node with id=${id}`);
                return resolve(this.instance(this.fromDatabaseStructure(nodes[0])));
            });
        });
    }
    findByExample(predicates) {
        return new Promise((resolve, reject) => {
            this.schema.seraph.query(cypher.queryFromPredicates(this.schema.label, predicates), (err, nodes) => {
                if (err)
                    return reject(err);
                let wrappedNodes = [];
                nodes.forEach(node => {
                    wrappedNodes.push(this.instance(this.fromDatabaseStructure(node)));
                });
                return resolve(wrappedNodes);
            });
        });
    }
    fetchRelation(relation) {
        return new Promise((resolve, reject) => {
        });
    }
    fetchRelations(relations) {
        return new Promise((resolve, reject) => {
        });
    }
    remove(id) {
        return new Promise((resolve, reject) => {
            id = id || this.data.id;
            this.schema.seraph.label(id, [`_${this.schema.label}`], true, (err) => {
                if (err)
                    return reject(err);
                this.data = {};
                return resolve();
            });
        });
    }
    hardRemove(id) {
        return new Promise((resolve, reject) => {
            id = id || this.data.id;
            this.schema.seraph.delete(id, (err) => {
                if (err)
                    return reject(err);
                this.data = {};
                return resolve();
            });
        });
    }
    count() {
        return new Promise((resolve, reject) => {
            let query = cypher.queryCount(this.schema.label);
            this.schema.seraph.query(query, (err, count) => {
                if (err)
                    return reject(err);
                if (!count)
                    return resolve(0);
                let key = Object.keys(count[0])[0];
                let c = count[0][key];
                return resolve(c);
            });
        });
    }
    dropId() {
        delete this.data.id;
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Model;
//# sourceMappingURL=data:application/json;base64,